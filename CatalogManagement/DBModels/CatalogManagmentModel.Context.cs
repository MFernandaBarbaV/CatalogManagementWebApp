//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CatalogManagement.DBModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CatalogManagementDBEntities : DbContext
    {
        public CatalogManagementDBEntities()
            : base("name=CatalogManagementDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Compra> Compra { get; set; }
        public virtual DbSet<CompraDetalle> CompraDetalle { get; set; }
        public virtual DbSet<Configuracion> Configuracion { get; set; }
        public virtual DbSet<Gastos> Gastos { get; set; }
        public virtual DbSet<Genero> Genero { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Marca> Marca { get; set; }
        public virtual DbSet<Operador> Operador { get; set; }
        public virtual DbSet<Operations> Operations { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SubTipoProducto> SubTipoProducto { get; set; }
        public virtual DbSet<Talla> Talla { get; set; }
        public virtual DbSet<TipoGasto> TipoGasto { get; set; }
        public virtual DbSet<TipoPrecio> TipoPrecio { get; set; }
        public virtual DbSet<TipoProducto> TipoProducto { get; set; }
        public virtual DbSet<Unidad> Unidad { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
        public virtual DbSet<VentaDetalle> VentaDetalle { get; set; }
        public virtual DbSet<TipoPrecioPorProducto> TipoPrecioPorProducto { get; set; }
    
        public virtual ObjectResult<Nullable<int>> ClienteAgregar(string nombreCliente, string email, string rFC, string calleDomicilioFiscal, string numeroInteriorDomicilioFiscal, string numeroExteriorDomicilioFiscal, string coloniaDomicilioFiscal, string codigoPostalDomicilioFiscal, string ciudadDomicilioFiscal, string estadoDomicilioFiscal, string telefono)
        {
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("NombreCliente", nombreCliente) :
                new ObjectParameter("NombreCliente", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var calleDomicilioFiscalParameter = calleDomicilioFiscal != null ?
                new ObjectParameter("CalleDomicilioFiscal", calleDomicilioFiscal) :
                new ObjectParameter("CalleDomicilioFiscal", typeof(string));
    
            var numeroInteriorDomicilioFiscalParameter = numeroInteriorDomicilioFiscal != null ?
                new ObjectParameter("NumeroInteriorDomicilioFiscal", numeroInteriorDomicilioFiscal) :
                new ObjectParameter("NumeroInteriorDomicilioFiscal", typeof(string));
    
            var numeroExteriorDomicilioFiscalParameter = numeroExteriorDomicilioFiscal != null ?
                new ObjectParameter("NumeroExteriorDomicilioFiscal", numeroExteriorDomicilioFiscal) :
                new ObjectParameter("NumeroExteriorDomicilioFiscal", typeof(string));
    
            var coloniaDomicilioFiscalParameter = coloniaDomicilioFiscal != null ?
                new ObjectParameter("ColoniaDomicilioFiscal", coloniaDomicilioFiscal) :
                new ObjectParameter("ColoniaDomicilioFiscal", typeof(string));
    
            var codigoPostalDomicilioFiscalParameter = codigoPostalDomicilioFiscal != null ?
                new ObjectParameter("CodigoPostalDomicilioFiscal", codigoPostalDomicilioFiscal) :
                new ObjectParameter("CodigoPostalDomicilioFiscal", typeof(string));
    
            var ciudadDomicilioFiscalParameter = ciudadDomicilioFiscal != null ?
                new ObjectParameter("CiudadDomicilioFiscal", ciudadDomicilioFiscal) :
                new ObjectParameter("CiudadDomicilioFiscal", typeof(string));
    
            var estadoDomicilioFiscalParameter = estadoDomicilioFiscal != null ?
                new ObjectParameter("EstadoDomicilioFiscal", estadoDomicilioFiscal) :
                new ObjectParameter("EstadoDomicilioFiscal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ClienteAgregar", nombreClienteParameter, emailParameter, rFCParameter, calleDomicilioFiscalParameter, numeroInteriorDomicilioFiscalParameter, numeroExteriorDomicilioFiscalParameter, coloniaDomicilioFiscalParameter, codigoPostalDomicilioFiscalParameter, ciudadDomicilioFiscalParameter, estadoDomicilioFiscalParameter, telefonoParameter);
        }
    
        public virtual int ClienteEditar(string nombreCliente, string email, string rFC, string calleDomicilioFiscal, string numeroInteriorDomicilioFiscal, string numeroExteriorDomicilioFiscal, string coloniaDomicilioFiscal, string codigoPostalDomicilioFiscal, string ciudadDomicilioFiscal, string estadoDomicilioFiscal, string telefono, Nullable<int> idCliente)
        {
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("NombreCliente", nombreCliente) :
                new ObjectParameter("NombreCliente", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var calleDomicilioFiscalParameter = calleDomicilioFiscal != null ?
                new ObjectParameter("CalleDomicilioFiscal", calleDomicilioFiscal) :
                new ObjectParameter("CalleDomicilioFiscal", typeof(string));
    
            var numeroInteriorDomicilioFiscalParameter = numeroInteriorDomicilioFiscal != null ?
                new ObjectParameter("NumeroInteriorDomicilioFiscal", numeroInteriorDomicilioFiscal) :
                new ObjectParameter("NumeroInteriorDomicilioFiscal", typeof(string));
    
            var numeroExteriorDomicilioFiscalParameter = numeroExteriorDomicilioFiscal != null ?
                new ObjectParameter("NumeroExteriorDomicilioFiscal", numeroExteriorDomicilioFiscal) :
                new ObjectParameter("NumeroExteriorDomicilioFiscal", typeof(string));
    
            var coloniaDomicilioFiscalParameter = coloniaDomicilioFiscal != null ?
                new ObjectParameter("ColoniaDomicilioFiscal", coloniaDomicilioFiscal) :
                new ObjectParameter("ColoniaDomicilioFiscal", typeof(string));
    
            var codigoPostalDomicilioFiscalParameter = codigoPostalDomicilioFiscal != null ?
                new ObjectParameter("CodigoPostalDomicilioFiscal", codigoPostalDomicilioFiscal) :
                new ObjectParameter("CodigoPostalDomicilioFiscal", typeof(string));
    
            var ciudadDomicilioFiscalParameter = ciudadDomicilioFiscal != null ?
                new ObjectParameter("CiudadDomicilioFiscal", ciudadDomicilioFiscal) :
                new ObjectParameter("CiudadDomicilioFiscal", typeof(string));
    
            var estadoDomicilioFiscalParameter = estadoDomicilioFiscal != null ?
                new ObjectParameter("EstadoDomicilioFiscal", estadoDomicilioFiscal) :
                new ObjectParameter("EstadoDomicilioFiscal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClienteEditar", nombreClienteParameter, emailParameter, rFCParameter, calleDomicilioFiscalParameter, numeroInteriorDomicilioFiscalParameter, numeroExteriorDomicilioFiscalParameter, coloniaDomicilioFiscalParameter, codigoPostalDomicilioFiscalParameter, ciudadDomicilioFiscalParameter, estadoDomicilioFiscalParameter, telefonoParameter, idClienteParameter);
        }
    
        public virtual ObjectResult<ClientesObtener_Result> ClientesObtener(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientesObtener_Result>("ClientesObtener", idClienteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CompraAgregar(Nullable<int> idProveedor, Nullable<int> idOperador, Nullable<System.DateTime> fechaCompra, Nullable<decimal> total, ObjectParameter idCompra)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idOperadorParameter = idOperador.HasValue ?
                new ObjectParameter("IdOperador", idOperador) :
                new ObjectParameter("IdOperador", typeof(int));
    
            var fechaCompraParameter = fechaCompra.HasValue ?
                new ObjectParameter("FechaCompra", fechaCompra) :
                new ObjectParameter("FechaCompra", typeof(System.DateTime));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CompraAgregar", idProveedorParameter, idOperadorParameter, fechaCompraParameter, totalParameter, idCompra);
        }
    
        public virtual ObjectResult<Nullable<int>> CompraDetalleAgregar(Nullable<int> idCompra, Nullable<int> idProducto, Nullable<int> idUnidad, Nullable<int> cantidad, Nullable<decimal> costoUnitario, Nullable<decimal> costoTotal)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("IdCompra", idCompra) :
                new ObjectParameter("IdCompra", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idUnidadParameter = idUnidad.HasValue ?
                new ObjectParameter("IdUnidad", idUnidad) :
                new ObjectParameter("IdUnidad", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var costoUnitarioParameter = costoUnitario.HasValue ?
                new ObjectParameter("CostoUnitario", costoUnitario) :
                new ObjectParameter("CostoUnitario", typeof(decimal));
    
            var costoTotalParameter = costoTotal.HasValue ?
                new ObjectParameter("CostoTotal", costoTotal) :
                new ObjectParameter("CostoTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CompraDetalleAgregar", idCompraParameter, idProductoParameter, idUnidadParameter, cantidadParameter, costoUnitarioParameter, costoTotalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MarcaAgregar(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MarcaAgregar", descripcionParameter);
        }
    
        public virtual int MarcaModificar(string descripcion, Nullable<int> idMarca)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarcaModificar", descripcionParameter, idMarcaParameter);
        }
    
        public virtual ObjectResult<MarcasObtener_Result> MarcasObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarcasObtener_Result>("MarcasObtener");
        }
    
        public virtual ObjectResult<Nullable<int>> ProductoAgregar(string descripcion, string codigo, Nullable<int> idTipoProducto, Nullable<int> idSubTipoProducto, Nullable<int> idMarca, Nullable<int> idProveedor, Nullable<int> idTalla, Nullable<int> idGenero, byte[] imagen, Nullable<decimal> precio)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var idTipoProductoParameter = idTipoProducto.HasValue ?
                new ObjectParameter("IdTipoProducto", idTipoProducto) :
                new ObjectParameter("IdTipoProducto", typeof(int));
    
            var idSubTipoProductoParameter = idSubTipoProducto.HasValue ?
                new ObjectParameter("IdSubTipoProducto", idSubTipoProducto) :
                new ObjectParameter("IdSubTipoProducto", typeof(int));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idTallaParameter = idTalla.HasValue ?
                new ObjectParameter("IdTalla", idTalla) :
                new ObjectParameter("IdTalla", typeof(int));
    
            var idGeneroParameter = idGenero.HasValue ?
                new ObjectParameter("IdGenero", idGenero) :
                new ObjectParameter("IdGenero", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProductoAgregar", descripcionParameter, codigoParameter, idTipoProductoParameter, idSubTipoProductoParameter, idMarcaParameter, idProveedorParameter, idTallaParameter, idGeneroParameter, imagenParameter, precioParameter);
        }
    
        public virtual int ProductoModificar(string descripcion, string codigo, Nullable<int> idTipoProducto, Nullable<int> idSubTipoProducto, Nullable<int> idMarca, Nullable<int> idProveedor, Nullable<int> idTalla, Nullable<int> idUnidad, Nullable<int> idGenero, byte[] imagen, Nullable<int> idProducto)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(string));
    
            var idTipoProductoParameter = idTipoProducto.HasValue ?
                new ObjectParameter("IdTipoProducto", idTipoProducto) :
                new ObjectParameter("IdTipoProducto", typeof(int));
    
            var idSubTipoProductoParameter = idSubTipoProducto.HasValue ?
                new ObjectParameter("IdSubTipoProducto", idSubTipoProducto) :
                new ObjectParameter("IdSubTipoProducto", typeof(int));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("IdMarca", idMarca) :
                new ObjectParameter("IdMarca", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idTallaParameter = idTalla.HasValue ?
                new ObjectParameter("IdTalla", idTalla) :
                new ObjectParameter("IdTalla", typeof(int));
    
            var idUnidadParameter = idUnidad.HasValue ?
                new ObjectParameter("IdUnidad", idUnidad) :
                new ObjectParameter("IdUnidad", typeof(int));
    
            var idGeneroParameter = idGenero.HasValue ?
                new ObjectParameter("IdGenero", idGenero) :
                new ObjectParameter("IdGenero", typeof(int));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductoModificar", descripcionParameter, codigoParameter, idTipoProductoParameter, idSubTipoProductoParameter, idMarcaParameter, idProveedorParameter, idTallaParameter, idUnidadParameter, idGeneroParameter, imagenParameter, idProductoParameter);
        }
    
        public virtual ObjectResult<ProductosObtener_Result> ProductosObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductosObtener_Result>("ProductosObtener");
        }
    
        public virtual ObjectResult<ProductosObtenerPorCodigo_Result> ProductosObtenerPorCodigo(string codigo)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductosObtenerPorCodigo_Result>("ProductosObtenerPorCodigo", codigoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ProveedorAgregar(string nombreProveedor, string telefono, string email, string dirección, Nullable<byte> diasCredito, string informacionBancaria)
        {
            var nombreProveedorParameter = nombreProveedor != null ?
                new ObjectParameter("NombreProveedor", nombreProveedor) :
                new ObjectParameter("NombreProveedor", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var diasCreditoParameter = diasCredito.HasValue ?
                new ObjectParameter("DiasCredito", diasCredito) :
                new ObjectParameter("DiasCredito", typeof(byte));
    
            var informacionBancariaParameter = informacionBancaria != null ?
                new ObjectParameter("InformacionBancaria", informacionBancaria) :
                new ObjectParameter("InformacionBancaria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ProveedorAgregar", nombreProveedorParameter, telefonoParameter, emailParameter, direcciónParameter, diasCreditoParameter, informacionBancariaParameter);
        }
    
        public virtual int ProveedorEditar(string nombreProveedor, string telefono, string email, string dirección, Nullable<byte> diasCredito, string informacionBancaria, Nullable<int> idProveedor)
        {
            var nombreProveedorParameter = nombreProveedor != null ?
                new ObjectParameter("NombreProveedor", nombreProveedor) :
                new ObjectParameter("NombreProveedor", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var diasCreditoParameter = diasCredito.HasValue ?
                new ObjectParameter("DiasCredito", diasCredito) :
                new ObjectParameter("DiasCredito", typeof(byte));
    
            var informacionBancariaParameter = informacionBancaria != null ?
                new ObjectParameter("InformacionBancaria", informacionBancaria) :
                new ObjectParameter("InformacionBancaria", typeof(string));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProveedorEditar", nombreProveedorParameter, telefonoParameter, emailParameter, direcciónParameter, diasCreditoParameter, informacionBancariaParameter, idProveedorParameter);
        }
    
        public virtual ObjectResult<ProveedorObtener_Result> ProveedorObtener(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProveedorObtener_Result>("ProveedorObtener", idProveedorParameter);
        }
    
        public virtual int spLog_Insert(ObjectParameter accessLogID, Nullable<int> userID, string userName, Nullable<int> operationID, string userLogin)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var operationIDParameter = operationID.HasValue ?
                new ObjectParameter("OperationID", operationID) :
                new ObjectParameter("OperationID", typeof(int));
    
            var userLoginParameter = userLogin != null ?
                new ObjectParameter("UserLogin", userLogin) :
                new ObjectParameter("UserLogin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLog_Insert", accessLogID, userIDParameter, userNameParameter, operationIDParameter, userLoginParameter);
        }
    
        public virtual int spOperationUser_DeleteAllByUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOperationUser_DeleteAllByUser", userIdParameter);
        }
    
        public virtual int spOperationUser_Insert(Nullable<int> operation, Nullable<int> user)
        {
            var operationParameter = operation.HasValue ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(int));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOperationUser_Insert", operationParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUser_Delete(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUser_Delete", userIDParameter);
        }
    
        public virtual ObjectResult<spUser_DoLogin_Result> spUser_DoLogin(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUser_DoLogin_Result>("spUser_DoLogin", loginParameter, passwordParameter);
        }
    
        public virtual int spUser_DoLogout(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_DoLogout", userIDParameter);
        }
    
        public virtual int spUser_Insert(ObjectParameter userID, string name, string lastName, string surname, string address, Nullable<int> zipCode, string email, string position, string shortName, string login, string password, Nullable<int> status)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_Insert", userID, nameParameter, lastNameParameter, surnameParameter, addressParameter, zipCodeParameter, emailParameter, positionParameter, shortNameParameter, loginParameter, passwordParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUser_Update(Nullable<int> userID, string name, string lastName, string surname, string address, Nullable<int> zipCode, string email, string position, string shortName, string login, string password, Nullable<int> status)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode.HasValue ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUser_Update", userIDParameter, nameParameter, lastNameParameter, surnameParameter, addressParameter, zipCodeParameter, emailParameter, positionParameter, shortNameParameter, loginParameter, passwordParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SubTipoProductoAgregar(string descripcion, Nullable<int> idTipoProducto)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idTipoProductoParameter = idTipoProducto.HasValue ?
                new ObjectParameter("IdTipoProducto", idTipoProducto) :
                new ObjectParameter("IdTipoProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SubTipoProductoAgregar", descripcionParameter, idTipoProductoParameter);
        }
    
        public virtual ObjectResult<SubTipoProductoObtener_Result> SubTipoProductoObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubTipoProductoObtener_Result>("SubTipoProductoObtener");
        }
    
        public virtual ObjectResult<Nullable<int>> TallasAgregar(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TallasAgregar", descripcionParameter);
        }
    
        public virtual ObjectResult<TallasObtener_Result> TallasObtener(Nullable<int> idTalla)
        {
            var idTallaParameter = idTalla.HasValue ?
                new ObjectParameter("IdTalla", idTalla) :
                new ObjectParameter("IdTalla", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TallasObtener_Result>("TallasObtener", idTallaParameter);
        }
    
        public virtual ObjectResult<TipoPrecioObtenerPorIdProducto_Result> TipoPrecioObtenerPorIdProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TipoPrecioObtenerPorIdProducto_Result>("TipoPrecioObtenerPorIdProducto", idProductoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TipoPrecioProductoAgregar(Nullable<int> idProducto, Nullable<int> idTipoPrecio, Nullable<decimal> precio)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idTipoPrecioParameter = idTipoPrecio.HasValue ?
                new ObjectParameter("IdTipoPrecio", idTipoPrecio) :
                new ObjectParameter("IdTipoPrecio", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TipoPrecioProductoAgregar", idProductoParameter, idTipoPrecioParameter, precioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TipoProductoAgregar(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TipoProductoAgregar", descripcionParameter);
        }
    
        public virtual int TipoProductoModificar(string descripcion, Nullable<int> idTipoProducto)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var idTipoProductoParameter = idTipoProducto.HasValue ?
                new ObjectParameter("IdTipoProducto", idTipoProducto) :
                new ObjectParameter("IdTipoProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TipoProductoModificar", descripcionParameter, idTipoProductoParameter);
        }
    
        public virtual ObjectResult<TipoProductoObtener_Result> TipoProductoObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TipoProductoObtener_Result>("TipoProductoObtener");
        }
    
        public virtual ObjectResult<Nullable<int>> UnidadesAgregar(string descripcion)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UnidadesAgregar", descripcionParameter);
        }
    
        public virtual ObjectResult<UnidadesObtener_Result> UnidadesObtener()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UnidadesObtener_Result>("UnidadesObtener");
        }
    
        public virtual ObjectResult<Nullable<int>> VentaAgregar(Nullable<int> idCliente, Nullable<int> idOperador, Nullable<decimal> descuento, Nullable<bool> esFactura, Nullable<decimal> total, Nullable<bool> guardadoTemporal, Nullable<System.DateTime> fecha, ObjectParameter idVenta)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idOperadorParameter = idOperador.HasValue ?
                new ObjectParameter("IdOperador", idOperador) :
                new ObjectParameter("IdOperador", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var esFacturaParameter = esFactura.HasValue ?
                new ObjectParameter("EsFactura", esFactura) :
                new ObjectParameter("EsFactura", typeof(bool));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var guardadoTemporalParameter = guardadoTemporal.HasValue ?
                new ObjectParameter("GuardadoTemporal", guardadoTemporal) :
                new ObjectParameter("GuardadoTemporal", typeof(bool));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("VentaAgregar", idClienteParameter, idOperadorParameter, descuentoParameter, esFacturaParameter, totalParameter, guardadoTemporalParameter, fechaParameter, idVenta);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VentaDetalleAgregar(Nullable<int> idVenta, Nullable<int> idProducto, Nullable<int> idUnidad, Nullable<int> cantidad, Nullable<decimal> precioUnitario, Nullable<decimal> precioTotal)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idUnidadParameter = idUnidad.HasValue ?
                new ObjectParameter("IdUnidad", idUnidad) :
                new ObjectParameter("IdUnidad", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioUnitarioParameter = precioUnitario.HasValue ?
                new ObjectParameter("PrecioUnitario", precioUnitario) :
                new ObjectParameter("PrecioUnitario", typeof(decimal));
    
            var precioTotalParameter = precioTotal.HasValue ?
                new ObjectParameter("PrecioTotal", precioTotal) :
                new ObjectParameter("PrecioTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VentaDetalleAgregar", idVentaParameter, idProductoParameter, idUnidadParameter, cantidadParameter, precioUnitarioParameter, precioTotalParameter);
        }
    }
}

@using CatalogManagement.Models.Entities
@model CatalogManagement.Models.ViewModels.ListItemsViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (Model == null || Model.Rows == null || Model.Rows.Count() == 0)
{

    if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            <strong>@ViewBag.ErrorMessage</strong>
        </div>
    }


}
else
{
    <div class="SubTitle">
        @Model.Title
    </div>

    if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
    {
        <div class="alert alert-success">
            <strong>@ViewBag.SuccessMessage</strong>
        </div>
        <script>
            window.setTimeout(function () {
                $(".alert").fadeTo(500, 0).slideUp(500, function () {
                    $(this).remove();
                });
            }, 4000);
        </script>
    }

    if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="alert alert-danger">
            <strong>@ViewBag.ErrorMessage</strong>
        </div>
    }


    <div class="input-group icon-addon addon-md center-block filter visible-sm hidden-xs visible-md visible-lg ">
        <input id="filter" type="text" class="form-control" placeholder="Filtrar información">
        <label for="filter" class="@faIconss.search" rel="tooltip" title="Nombre de Usuario"></label>
    </div>

    <div class="input-group icon-addon addon-md center-block filter visible-xs hidden-sm ">
        <input id="filterXS" type="text" class="form-control" placeholder="Filtrar">
        <label for="filterXS" class="@faIconss.search" rel="tooltip" title="Nombre de Usuario"></label>
    </div>

    <div class="input-group col-lg-12 col-md-12 col-xs-12 col-sm-12">
        @if (Model.UseNewItemButton)
        {
            using (Html.BeginForm(Model.ButtonAction, Model.ButtonController, new { OperationId = Model.OperationNewItem }, FormMethod.Post, new { id = "myForm", data_toggle = "validator", OperationId = Model.OperationNewItem.ToString() }))
            {
                <div class="form-group">
                    <button class="btn btn-lg btn-primary PrettyButton" type="submit">@Model.ButtonText</button>
                </div>
            }
        }
    </div>

    <table class="table table-bordered table-hover table-scrollable filterable hidden-xs visible-md visible-lg visible-sm ">
        <thead>
            <tr class="hidden-xs">
                @foreach (var column in Model.Rows[0].Columns)
                {
                    <th>
                        @column.ColumnHeader
                    </th>
                }

            </tr>
        </thead>
        <tbody id="myTable">
            @foreach (var row in Model.Rows)
                {
                <tr class="searchable hidden-xs">
                    @foreach (var column in row.Columns)
                    {
                        switch (column.Type)
                        {
                            case CatalogManagement.Models.Entities.ColumnType.Button:
                                <td>
                                    @using (Html.BeginForm(column.ButtonAction, column.ButtonController, new { OperationId = column.ButtonOperationId.ToString(), ItemId = column.ID.ToString() }, FormMethod.Post))
                                    {
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" value="@column.ButtonOperationId" name="OperationId">
                                        <input type="hidden" value="@column.ID" name="ID">
                                        <button class="btn btn-primary" disabled="@column.ButtonDissabled">@column.ButtonText</button>
                                    }
                                </td>
                                break;
                            case CatalogManagement.Models.Entities.ColumnType.CheckBox:
                                <td>@column.Value</td>
                                break;
                            case CatalogManagement.Models.Entities.ColumnType.Text:
                                <td>@column.Value</td>
                                break;
                            default:
                                <td>@column.Value</td>
                                break;
                        }
                    }
                </tr>
            }
        </tbody>

    </table>

    foreach (var row in Model.Rows)
    {
        <table class="table table-bordered table-hover visible-xs hidden-sm hidden-md hidden-lg table-condensed searchableXS">

            <tbody id="myTable">
                @foreach (var column in row.Columns)
                    {
                    <tr class="">
                        <td class="col-xs-4">@column.ColumnHeader</td>

                        @switch (column.Type)
                        {
                            case CatalogManagement.Models.Entities.ColumnType.Button:
                                <td class="col-xs-8">
                                    @using (Html.BeginForm(column.ButtonAction, column.ButtonController, new { OperationId = column.ButtonOperationId.ToString(), ItemId = column.ID.ToString() }, FormMethod.Post))
                                {
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" value="@column.ButtonOperationId" name="OperationId">
                                        <input type="hidden" value="@column.ID" name="ID">
                                        <button class="btn btn-primary" disabled="@column.ButtonDissabled">@column.ButtonText</button>
                                    }
                                </td>
                                break;
                            case CatalogManagement.Models.Entities.ColumnType.CheckBox:
                            case CatalogManagement.Models.Entities.ColumnType.Text:
                            default:
                                <td class="col-xs-8">@column.Value</td>
                                break;
                        }

                    </tr>
                }
            </tbody>

        </table>
    }

}

@*<script src="~/Scripts/TablePagination.js"></script>*@

<script>
    $(document).ready(function () {
        (function ($) {

            $('#filter').keyup(function () {

                var rex = new RegExp($(this).val(), 'i');

                $('.searchable').hide();
                $('.searchable').filter(function () {
                    return rex.test($(this).text());
                }).show();

            })

            $('#filterXS').keyup(function () {

                var rex = new RegExp($(this).val(), 'i');

                $('.searchableXS').attr('style', 'display:none !important');
                $('.searchableXS').filter(function () {
                    return rex.test($(this).text());
                }).attr('style', 'display:table ');

            })

        }(jQuery));


    });

</script>
